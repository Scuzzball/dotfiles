#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

#requires: yq and avahi-resolve
# yq comes with xq which is jq for xml
# https://github.com/kislyuk/yq
# pip install yq

command -v jq >/dev/null 2>&1 || { echo >&2 "I require jq but it's not installed.  Aborting."; exit 1; }
command -v xq >/dev/null 2>&1 || { echo >&2 "I require xq but it's not installed.  Aborting."; exit 1; }
command -v avahi-resolve-address >/dev/null 2>&1 || { echo >&2 "I require avahi-resolve-address but it's not installed install 'avahi-utils'.  Aborting."; exit 1; }

port=22

show_help () {
    echo "Usage: sshScanSubnet {target specification}"
    echo "    target specification: whatever is valid for nmap"
}

firstArg=${1:-}
if [[ $firstArg == "-h" ]] || [[ $firstArg == "--help" ]]; then
    show_help
    exit 0
fi

if [ $# -eq 0 ]; then
    #no arguments
    source sind.sh

    IFS=$'\r\n' GLOBIGNORE='*' command eval  'subnets=($(ip -o -f inet addr show | awk "/scope global/ {print \$2 \" \" \$4}" | column -t))'
    subnetChoice=$(sind "Choose one" "${subnets[@]}")
    subnet=$(echo "${subnets[$subnetChoice]}" | awk '{print $2}')
else
    subnet=$firstArg
fi

echo "scanning $subnet"

sudo nmap -Pn -oX - -p$port $subnet > /tmp/nmapOutput

hosts=$(cat /tmp/nmapOutput | xq -c '[.nmaprun.host[] |  select(.address | type == "array") | select(.ports.port.state."@state" == "open") | {ip: .address[] | select(."@addrtype" | contains("ipv4"))."@addr", mac: .address[] | select(."@addrtype" | contains("mac"))."@addr", vendor: .address[] | select(."@addrtype" | contains("mac"))."@vendor"}]')

#hosts looks like
#[
#    {"ip":"192.168.1.1","mac":"80:2A:A8:4F:8F:E1","vendor":"Ubiquiti Networks"},
#    {"ip":"192.168.1.2","mac":"E0:63:DA:2E:32:9E","vendor":null}
#]

#get mdns names
count=$(echo "$hosts" | jq length);
echo "resolving hostnames for $count hosts"
resolved=$(avahi-resolve-address $(echo "$hosts" | jq  -r '.[] | .ip') 2>/dev/null)
# resolved looks like
#192.168.1.4     pho.local

while read line ; do
    #line is "ip      name"
    ip=$(echo $line | cut -d' ' -f1)
    hostname=$(echo $line | cut -d' ' -f2)
    #echo "$ip: $hostname"
    #jq can append to stuff!
    hosts=$(echo "$hosts" | jq --arg IP "$ip" --arg HOST "$hostname" '[.[] | select(.ip == $IP) += {hostname: $HOST}]')
done <<< "$resolved"

# format as TSV, tell column to *only* work on tabs and don't merge empty values
echo "$hosts" | jq -r '(["IP", "HOSTANME", "MAC", "VENDOR"]), (.[] | [.ip, .hostname, .mac, .vendor]) | @tsv' | column -nt -s $'\t'
