#!/usr/bin/env bash
# Copyright (c) 2014 "Cowboy" Ben Alman
#https://github.com/cowboy/dotfiles
# Licensed under the MIT license.
# http://benalman.com/about/license/
set -euo pipefail

if [[ $# -gt 0 ]] && [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP
Usage: $(basename "$0")
setup dotfiles
HELP
exit; fi

# overview of how this works
# we call do_stuff $action at the bottom
# actions are
# * copy
# ** copy into ~/
# * link
# ** link into ~/
# * config
# ** link into ~/.config
# * init
# ** run scripts
#
# do stuff will look for the following functions:
# * ${action}_header
# ** prints something when doing this
# ** no args
# * ${action}_test
# ** returns 0 to skip and string reason, else does action
# ** args of "$file" "$dest"
# * ${action}_dest
# ** return path to override base copy destination
# ** arg of original destination (~/foo in the case of $action/foo)
# * ${action}_do
# ** actually does the action
# * ${action}_files
# ** override the list of files to work with instead of $repo/$action/*
# ** takes arg of the original file list



export DOTFILES=~/.dotfiles

# Logging stuff.
function e_header()   { echo -e "\n\033[1m$*\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $*"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $*"; }
function e_warn()     { echo -e " \033[1;33m✖\033[0m  $*"; }
function e_arrow()    { echo -e " \033[1;34m➜\033[0m  $*"; }

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    e_error "$msg"
    exit "$code"
}

checkInstalled() {
    tool=$1
    messsage="${2:-I require $tool but it is not installed}"
    command -v "$tool" >/dev/null 2>&1 || die "$messsage"
}

# Test if this script was run via the "dotfiles" bin script (vs. via curl/wget)
function is_dotfiles_bin() {
    [[ "$(basename "$0" 2>/dev/null)" == dotfiles ]] || return 1
}

function init_do() {
    e_header "Running $(basename "$2")"
    #shellcheck disable=SC1090
    "$2"
}


# Copy files.
function copy_header() { e_header "Copying files into home directory"; }
function copy_test() {
    if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
        echo "same file"
    elif [[ "$1" -ot "$2" ]]; then
        echo "destination file newer"
    else
        return 1;
    fi
}
function copy_do() {
    e_success "Copying ~/$1."
    cp -r "$2" ~/
}

# Link files.
function link_header() { e_header "Linking files into home directory"; }
function link_test() {
    [[ "$1" -ef "$2" ]] && echo "same file"
}
function link_do() {
    e_success "Linking ~/$1."
    ln -sf "${2#"$HOME"/}" ~/
}

# Link config files.
function config_header() { e_header "Linking files into ~/.config directory"; }
function config_dest() {
    echo "$HOME/.config/$base"
}
function config_test() {
    [[ "$1" -ef "$2" ]] && echo "same file"
}
function config_do() {
    e_success "Linking ~/.config/$1."
    ln -sf ../"${2#"$HOME"/}" ~/.config/
}

# Copy, link, init, etc.
function do_stuff() {
    action=$1
    local base dest skip
    local files=("$DOTFILES"/"${action}"/*)
    # TODO: what does this line do and why does shellcheck not like it
    #shellcheck disable=SC2207
    [[ $(declare -f "${action}_files") ]] && files=($("${action}_files" "${files[@]}"))
    # No files? abort.
    if (( ${#files[@]} == 0 )); then return; fi
    # Run _header function only if declared.
    [[ $(declare -f "${action}_header") ]] && "${action}_header"
    # Iterate over files.
    for file in "${files[@]}"; do
        base="$(basename "$file")"
        # Get dest path.
        if [[ $(declare -f "${action}_dest") ]]; then
            dest="$("${action}_dest" "$base")"
        else
            dest="$HOME/$base"
        fi
        # Run _test function only if declared.
        if [[ $(declare -f "${action}_test") ]]; then
            # If _test function returns a string, skip file and print that message.
            ret=0;
            skip=$("${action}_test" "$file" "$dest") || ret=$?
            echo "skip: $skip; ret: $ret"
            if [[ "$ret" -eq 0 ]]; then
                e_warn "Skipping ~/$base, $skip."
                continue
            fi
            # Destination file already exists in ~/. Back it up!
            if [[ -e "$dest" ]]; then
                e_arrow "Backing up ~/$base."
                # Set backup flag, so a nice message can be shown at the end.
                backup=1
                # Create backup dir if it doesn't already exist.
                [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"
                # Backup file / link / whatever.
                mv "$dest" "$backup_dir"
            fi
        fi
        # Do stuff.
        "${action}_do" "$base" "$file"
    done
}

# Enough with the functions, let's do stuff.

# Set the prompt delay to be longer for the very first run.
export prompt_delay=5; is_dotfiles_bin || prompt_delay=15


checkInstalled git

# Initialize.
if [[ ! -d $DOTFILES ]]; then
    # Dotfiles directory doesn't exist? Clone it!
    e_header "Downloading dotfiles"
    git clone --branch "${DOTFILES_GH_BRANCH:-master}" --recursive "https://github.com/${DOTFILES_GH_USER:-mtfurlan}/dotfiles.git" "$DOTFILES"
    cd $DOTFILES || die "couldn't cd dotfiles"
elif [[ $# -eq 0 ]] || [[ "$1" != "restart" ]]; then
    # Make sure we have the latest files.
    e_header "Updating dotfiles"
    cd $DOTFILES || die "couldn't cd dotfiles"
    prev_head="$(git rev-parse HEAD)"
    git pull
    git submodule update --init --recursive --quiet
    if [[ "$(git rev-parse HEAD)" != "$prev_head" ]]; then
        if is_dotfiles_bin; then
            e_header "Changes to dotfiles detected, restarting script"
            exec "$0" restart
        else
            e_header "Changes to dotfiles detected, please re-run script"
            exit
        fi
    fi
fi

# Add binaries into the path
[[ -d $DOTFILES/bin ]] && export PATH=$DOTFILES/bin:$PATH

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y-%m-%d_%H:%M:%S")/"
backup=

# Execute code for each file in these subdirectories.
do_stuff copy
do_stuff link
do_stuff config
do_stuff init

# Alert if backups were made.
if [[ "$backup" ]]; then
    echo -e "\nBackups were moved to ~/${backup_dir#"$HOME"/}"
fi

# All done!
e_header "All done!"
