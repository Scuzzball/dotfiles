#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC2120
help () {
    # if arguments, print them
    [ $# == 0 ] || echo "$*"

  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [BRANCH...]
    Delete merged branches, optionally limiting to branches passed in
Available options:
  -h, --help       display this help and exit
  -n, --dry-run    list branches, don't delete
EOF

    # if args, exit 1 else exit 0
    [ $# == 0 ] || exit 1
    exit 0
}


# getopt short options go together, long options have commas
TEMP=$(getopt -o hn --long help,dry-run -n "$0" -- "$@")
#shellcheck disable=SC2181
if [ $? != 0 ] ; then
    die "something wrong with getopt"
fi
eval set -- "$TEMP"

dryRun=false
while true ; do
    case "$1" in
        -n|--dry-run) dryRun=true ; shift ;;
        -h|--help) help ;;
        --) shift ; break ;;
        *) die "issue parsing args, unexpected argument '$0'!" ;;
    esac
done

# newline delimited string
branchFilters=$( IFS=$'\n'; echo "$*")

git fetch --prune

upstreamGone=$(git for-each-ref --format '%(refname) %(upstream:track) %(upstream)' refs/heads \
    | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}')

if [ -n "$branchFilters" ]; then
    # if we have branch filters, get lines in both
    branchesToDelete=$(comm -12 <(echo "$branchFilters" | sort) <(echo "$upstreamGone" | sort))
else
    branchesToDelete=$upstreamGone
fi

branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$branchesToDelete" == "*$branch*" ]]; then
    echo "on a deleted upstream branch, checking out develop"
    if [ "$dryRun" == false ]; then
        git checkout develop
    fi
fi

if [ -n "${branchesToDelete}" ]; then
    if [ -n "$branchFilters" ]; then
        echo -n "filtered "
    fi
    echo "branches with deleted upstream:"
    echo "$branchesToDelete" | sed 's/^/    /'
    if [ "$dryRun" == false ]; then
        echo "$branchesToDelete" | xargs git branch -D
    fi
fi
