#!/bin/bash
set -euo pipefail
#TODO: support linking to dirs

# shellcheck disable=SC2120
help () {
    # if arguments, print them
    [ $# == 0 ] || echo "$*"

  cat <<EOF
Usage: $0 [FILE [LINE NUMBER]]
       $0
Link to the online git file or repo, with optional line number
  -h, --help       display this help and exit
EOF

    # if args, exit 1 else exit 0
    [ $# == 0 ] || exit 1
    exit 0
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

# getopt short options go together, long options have commas
TEMP=$(getopt -o h --long help -n "$0" -- "$@")
#shellcheck disable=SC2181
if [ $? != 0 ] ; then
    die "something wrong with getopt"
fi
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) help; ;;
        --) shift ; break ;;
        *) die "issue parsing args, unexpected argument '$0'!" ;;
    esac
done

relFile=${1:-}
if [ -n "$relFile" ]; then
    # if we have file, cd to it so git commands work
    cd "$(dirname "$relFile")"
fi

line=${2:-}

# get git remote URL
# just picks the first
if ! url=$(git config --get "remote.$(git remote | head -n1).url"); then
    die "no remote?"
fi

# set provider specific stuff
lineStr=""
if [[ $url == *"bitbucket.org"* ]]; then
    provider="bitbucket.org"
    urlThing="src"
    if [ -n "$line" ]; then
        lineStr="#lines-$line"
    fi
elif [[ $url == *"github.com"* ]]; then
    provider="github.com"
    urlThing="blob"
    if [ -n "$line" ]; then
        lineStr="#L$line"
    fi
else
    die "dunno what to do for $url"
fi

# parse remote URL (git@ or https://) to "$owner/$repo"
repo=$(echo "$url" | perl -pe 's#^(?:https|git)(?:://|@)(?:[^:/]*)(?:[:/])##; s/\.git$//')

# if no file, just print repo url
if [ -z "$relFile" ]; then
    echo "https://$provider/$repo"
    exit 0
fi

# get current branch or commit hash
# https://stackoverflow.com/a/1593487/2423187
head=$(git symbolic-ref -q HEAD || true)
head=${head##refs/heads/}
head=${head:-$(git rev-parse HEAD)}

# get file relative to git root
fullFile=$(realpath "$relFile") # get full path of relative filepath
gitRoot=$(git rev-parse --show-toplevel)
file=${fullFile#"$gitRoot/"} # remove prefix of $gitRoot/

#echo "provider: $provider"
#echo "repo: $repo"
#echo "urlThing: $urlThing"
#echo "head: $head"
#echo "file: $file"

# print the URL
url="https://$provider/$repo/$urlThing/$head/$file$lineStr"
echo "$url"
exit 0
