#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC2120
usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [OPTION]... [TARGET SPECIFICATION]
scan a subnet (or nmap TARGET SPECIFICATION) for all hosts responding to a port
Available options:
    -h, --help      Print this help and exit
    -p, --port=PORT Use PORT instead of 22
EOF
    exit "${1-0}" #default exit status 0
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

checkInstalled() {
    tool=$1
    messsage="${2:-I require $tool but it\'s not installed}"
    command -v "$tool" >/dev/null 2>&1 || die "$messsage"
}

checkInstalled jq
checkInstalled yq "missing yq, pip install yq"
checkInstalled nmap
checkInstalled avahi-resolve-address "avahi-resolve-address not installed, install 'avahi-utils'"


# getopt short options go together, long options have commas
TEMP=$(getopt -o hp: --long help,port: -n "$0" -- "$@")
#shellcheck disable=SC2181
if [ $? != 0 ] ; then
    die "something wrong with getopt"
fi
eval set -- "$TEMP"

port=22
while true ; do
    case "$1" in
        -h|--help) usage ;;
        -p|--port) port=$2 ; shift 2 ;;
        --) shift ; break ;;
        *) die "issue parsing args, unexpected argument '$0'!" ;;
    esac
done

if [ $# -gt 0 ]; then
    subnet=$1
else
    #shellcheck disable=SC1091
    source sind.sh

    mapfile -t subnets < <(ip -o -f inet addr show | awk "/scope global/ {print \$2 \" \" \$4}" | column -t)
    subnetChoice=$(sind "Choose one" "${subnets[@]}")
    subnet=$(echo "${subnets[$subnetChoice]}" | awk '{print $2}')
fi

echo "scanning for port $port in $subnet"


# shellcheck disable=SC2024
sudo nmap --max-parallelism 100 -Pn -oX - -p"$port" "$subnet" > /tmp/nmapOutput

# TODO: mac address won't exist if we're across a subnet that doesn't pass stuff
# This means host.address will be obect not array because fuck you
# We need to handle it
hosts=$(xq -c '[.nmaprun.host[] | select(.ports.port.state."@state" == "open") | if .address | type == "array" then {ip: .address[] | select(."@addrtype" | contains("ipv4"))."@addr", mac: .address[] | select(."@addrtype" | contains("mac"))."@addr", vendor: .address[] | select(."@addrtype" | contains("mac"))."@vendor"} else {ip: .address."@addr", mac: null, vendor: null} end]' /tmp/nmapOutput)

#hosts looks like
#[
#    {"ip":"192.168.1.1","mac":"80:2A:A8:4F:8F:E1","vendor":"Ubiquiti Networks"},
#    {"ip":"192.168.1.2","mac":"E0:63:DA:2E:32:9E","vendor":null}
#    {"ip":"10.4.4.4","mac":null,"vendor":null}
#]

#get mdns names
count=$(echo "$hosts" | jq length);
msg "resolving hostnames for $count hosts"

# shellcheck disable=SC2046
resolved=$(avahi-resolve-address $(echo "$hosts" | jq  -r '.[] | .ip') 2>/dev/null)
# resolved looks like
#192.168.1.4     pho.local

while read -r line ; do
    #line is "ip      name"
    ip=$(echo "$line" | awk '{print $1}')
    hostname=$(echo "$line" | awk '{print $2}')
    #msg "got '$ip': '$hostname'"
    #jq can append to stuff!
    hosts=$(echo "$hosts" | jq --arg IP "$ip" --arg HOST "$hostname" '[.[] | select(.ip == $IP) += {hostname: $HOST}]')
done <<< "$resolved"

# format as TSV, tell column to *only* work on tabs and don't merge empty values
echo "$hosts" | jq -r '(["IP", "HOSTANME", "MAC", "VENDOR"]), (.[] | [.ip, .hostname, .mac, .vendor]) | @tsv' | column --table -nt -s $'\t' || echo "$hosts" | jq -r '(["IP", "HOSTANME", "MAC", "VENDOR"]), (.[] | [.ip, .hostname, .mac, .vendor]) | @tsv'
