#!/bin/bash

alias ls='ls -F --color=auto'
alias ll='ls -lAhF --color=auto'
alias la='ls -lAF --color=auto'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias pj='ps j'

alias df='df -h'

alias tmux='tmux -2'

alias glog="git log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
alias gpush="git push --force-with-lease"

alias ix="curl -F 'f:1=<-' ix.io"
alias qr='curl -F-=\<- qrenco.de'
alias weather='curl "wttr.in?m&format=4"'
alias weatherGraph='curl v2.wttr.in?m'

alias :e=vim

alias whatismyip4='curl -4 ifconfig.co 2>/dev/null'
alias whatismyip6='curl -6 ifconfig.co 2>/dev/null'
whatismyip()
{
    ipv4=$(whatismyip4)
    ipv6=$(whatismyip6)
    echo -e "ipv4: $ipv4\nipv6: $ipv6"
}

alias duc="du --max-depth=1 -ha | sort -rh | sed 's/\.\///' | sed /^0/d"

mkcd () { mkdir -p "$@" && cd "$@" || echo "failed to cd '$*'?"; }


gcd()
{
    # based on https://unix.stackexchange.com/a/97958/60480
    local tmp
    tmp=$(mktemp)
    local repo_name

    git clone "$@" 2>&1 | tee "$tmp"
    repo_name=$(awk -F\' '/Cloning into/ {print $2}' "$tmp")
    rm "$tmp"
    printf "changing to directory %s\n" "$repo_name"
    cd "$repo_name" || echo "failed to cd to cloned repo '$repo_name'?"
}

extract () {
    if [ -f "$1" ] ; then
      case $1 in
        *.tar | *.tar.* | *.tgz | *.txf) tar xf     "$1"     ;;
        *.bz2)                           bunzip2    "$1"     ;;
        *.rar)                           unrar x    "$1"     ;;
        *.gz)                            gunzip     "$1"     ;;
        *.tbz2)                          tar xjf    "$1"     ;;
        *.zip)                           unzip      "$1"     ;;
        *.Z)                             uncompress "$1"     ;;
        *.7z)                            7z x       "$1"     ;;
        *.xz)                            unxz -k    "$1"     ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

function dsf {
    git diff --no-index "$@"
}

alias gitaddWithoutWhitespace='git diff -U0 -w --no-color | git apply --cached --ignore-whitespace --unidiff-zero -'

function setTitle {
    echo -en "\033]0;$*\007"
}

function lyricsGrep {
    find . -type f \( -name "*.flac" -o -name "*.mp3" \) -print0 | xargs -0 exiftool -artist -album -title -lyrics -lyrics-xxx | grep -E -i -B3 "$@"
}

function replace {
    search=${1:-}
    replace=${2:-}
    grep -lRZ "$search" . | xargs -0 -l sed -i "s/$search/$replace/"
}
